1;

function [  theta, ...
            state_vector, ...
            predition_error, ...
            prediction_error_covariance, ...
            covariance_matrix ] = var_kalman_step( theta,...
                                                   state_vector,...
                                                   current_samples,...
                                                   covariance_matrix,...
                                                   noise_variance )
  theta = mround(theta);
  state_vector = mround(state_vector);
  noise_variance = mround(noise_variance);
  covariance_matrix = mround(covariance_matrix);
  
  output_prediction = mround(theta'*state_vector);
  predition_error = mround(current_samples - output_prediction);  
  state_vector = mround([ output_prediction; state_vector ]);
  prediction_error_covariance = mround(...
      theta'*covariance_matrix*theta + noise_variance...
  );
  
  covariance_matrix = mround(...
    [...
          prediction_error_covariance,      mround(covariance_matrix*theta)';...
          mround(covariance_matrix*theta),  covariance_matrix...
    ]...
  );
      
  theta = [theta; zeros(2,2)];
endfunction

function [detection, threshold] = var_kalman_detect(error, error_covariance)
     global mu;
     threshold = zeros(2,1);
     threshold(1) = mround(mu*sqrt(abs(error_covariance(1,1))));
     threshold(2) = mround(mu*sqrt(abs(error_covariance(2,2))));
     detection = abs(error) > threshold;
endfunction

function [ state_vector,...
           covariance_matrix ] = var_kalman_update( detection,...
                                                    state_vector,...
                                                    error,...
                                                    error_covariance,...
                                                    covariance_matrix )
     L = mround(...
            build_gain_vector(...
                detection,... 
                error_covariance,...
                covariance_matrix...
            )...
        );
          
     state_vector = mround(state_vector + mround(L*error));
     covariance_matrix = mround(covariance_matrix - mround(L*error_covariance*L'));
endfunction

function [new_detection, false_alarm] = var_false_alarms(detection, t0, tk)
    global model_rank;
    false_alarm = 0; 
    new_detection = detection;
    [new_detection_l, false_l] =  fill_detection(detection(1,:), model_rank);
    [new_detection_r, false_r] =  fill_detection(detection(2,:), model_rank);
    
    if(false_l)
      new_detection(1,:) = new_detection_l;
      false_alarm = 1;
    endif
    
    if(false_r)
      new_detection(2,:) = new_detection_r;
      false_alarm = 1;
    endif
    
    new_detection = (detection + new_detection) > 0;
endfunction


function [] = var_kalman_detector()
  
endfunction


function [signal_reconstruction] = var_kalman_interpolator( signal,...
                                                            detection,...
                                                            t_start,...
                                                            t_end,...
                                                            theta,...
                                                            noise_variance )
    global model_rank;
    
    covariance_matrix = zeros(2*model_rank, 2*model_rank);
    state_vector = mround(init_regression_vector(signal, model_rank, t_start+1));

    for tk=t_start+1:t_end;
      [ theta, ...
        state_vector, ...
        error, ...
        error_covariance, ...
        covariance_matrix ] = var_kalman_step( theta,...
                                               state_vector,...
                                               signal(:,tk),...
                                               covariance_matrix,...
                                               noise_variance );
     
     [ state_vector,...
       covariance_matrix ] = var_kalman_update( detection(:,tk),...
                                                state_vector,...
                                                error,...
                                                error_covariance,...
                                                covariance_matrix );
    endfor

    signal_reconstruction = retrieve_reconstruction(state_vector);
endfunction
