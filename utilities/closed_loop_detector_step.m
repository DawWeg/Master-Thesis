function [kalman_state_vector, ...
          kalman_covariance_matrix, ...
          kalman_coefficients, ...
          kalman_error, ...
          kalman_noise_variance] = closed_loop_detector_step( ...
                                   kalman_state_vector, ...
                                   kalman_covariance_matrix, ...
                                   kalman_coefficients, ...
                                   noise_variance, ...
                                   input_sample)
                                   
kalman_output_prediction = kalman_coefficients*kalman_state_vector;
kalman_error = input_sample - kalman_output_prediction;
kalman_state_vector = [kalman_output_prediction; kalman_state_vector];
kalman_h = kalman_covariance_matrix*kalman_coefficients';
kalman_noise_variance = kalman_coefficients*kalman_h + noise_variance;
kalman_covariance_matrix = [kalman_noise_variance, kalman_h'; kalman_h, kalman_covariance_matrix];
kalman_coefficients = [kalman_coefficients, 0];                                     
                                   

endfunction
