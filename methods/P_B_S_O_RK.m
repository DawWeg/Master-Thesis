function [  clear_signal,...
            detection_signal,...
            error_trajectory,...
            error_threshold  ] = P_B_S_O_RK(input_signal)
            
[l_clear_signal, ...
 l_detection_signal, ...
 l_error_trajectory, ...
 l_error_threshold, ...
 l_coefficients_trajectory, ...
 l_noise_variance_trajectory] = P_U_S_O_RK(input_signal);
 
[r_clear_signal, ...
 r_detection_signal, ...
 r_error_trajectory, ...
 r_error_threshold, ...
 r_coefficients_trajectory, ...
 r_noise_variance_trajectory] = P_U_S_O_RK(flip(input_signal));

[lr_detection_signal] = bidirectional_analysis(l_detection_signal, flip(r_detection_signal));

[lr_clear_signal] = bidirectional_interpolation(lr_detection_signal, ...
                                                l_clear_signal, ...                                                
                                                l_coefficients_trajectory, ...
                                                l_noise_variance_trajectory, ...
                                                flip(r_clear_signal), 
                                                flip(r_coefficients_trajectory), ...
                                                flip(r_noise_variance_trajectory));


clear_signal = lr_clear_signal;
detection_signal = lr_detection_signal(:);
error_trajectory = zeros(size(input_signal));
error_threshold = zeros(size(input_signal));

endfunction